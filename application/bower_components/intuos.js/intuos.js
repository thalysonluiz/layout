// Generated by CoffeeScript 1.7.1
window.$intuos = {
  customElements: new Object(),
  renderQueue: new Object(),
  errorTemplate: '<p>:message</p>',
  templateExtension: 'pen',
  templateFolder: 'templates/',
  defineCustomClass: function(name) {
    var customObjects;
    customObjects = document.getElementsByClassName(name);
    customObjects = Array.prototype.slice.call(customObjects);
    return $intuos.customElements = customObjects;
  },
  defineErrorTemplate: function(template) {
    return $intuos.errorTemplate = template;
  },
  defineCustomExtension: function(extension) {
    return $intuos.templateExtension = '.' + extension;
  },
  defineCustomFolder: function(path) {
    return $intuos.templateFolder = path;
  },
  concatenateObjects: function() {
    var elem, idx, key, _ref, _results;
    idx = $intuos.renderQueue.length;
    _ref = $intuos.customElements;
    _results = [];
    for (key in _ref) {
      elem = _ref[key];
      $intuos.renderQueue[idx] = elem;
      _results.push(idx++);
    }
    return _results;
  },
  createCustomElement: function() {
    return document.createElement('partial');
  },
  findAll: function() {
    $intuos.renderQueue = document.getElementsByTagName('partial');
    $intuos.renderQueue = Array.prototype.slice.call($intuos.renderQueue);
    return $intuos.concatenateObjects();
  },
  ajaxCall: function(url, async) {
    var xmlhttp;
    if (window.XMLHttpRequest) {
      xmlhttp = new XMLHttpRequest();
    } else {
      xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
    }
    xmlhttp.open('GET', url, async);
    xmlhttp.send();
    if (xmlhttp.status === 404) {
      return $intuos.errorTemplate.replace(':message', xmlhttp.responseText);
    }
    return xmlhttp.responseText;
  },
  buildURL: function(domObject) {
    var absolute, extension, path, template, url;
    absolute = new RegExp('^(?:[a-z]+:)?//', 'i');
    template = domObject.getAttribute('data-template');
    extension = $intuos.templateExtension;
    if (!domObject.hasAttribute('data-template')) {
      throw 'intuos.js: the data-template attribute is required';
    }
    if (absolute.test(template)) {
      throw 'intuos.js: the library do not accept absolute path';
    } else {
      if (path = domObject.getAttribute('data-path')) {
        url = path + '/' + template + extension;
      } else {
        url = $intuos.templateFolder + template + extension;
      }
    }
    return url;
  },
  renderElement: function(domObject, async) {
    var res, url, _ref;
    async = (_ref = typeof async !== 'undefined') != null ? _ref : {
      async: false
    };
    url = $intuos.buildURL(domObject);
    res = $intuos.ajaxCall(url, async);
    return domObject.innerHTML = res;
  },
  init: function() {
    var elem, _i, _len, _ref, _results;
    $intuos.findAll();
    _ref = $intuos.renderQueue;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      _results.push($intuos.renderElement(elem));
    }
    return _results;
  }
};
